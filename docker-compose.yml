version: '3.9'

services:
  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      #- ./containers/traefik.yml:/traefik.yml
    networks:
      - network_default
  
  rabbitmq1:
    image: rabbitmq:3.13.2-management
    container_name: rabbitmq1
    hostname: rabbitmq1
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=resources
    volumes:
      - ./containers/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie
      - ./containers/cluster-entrypoint.sh:/usr/local/bin/cluster-entrypoint.sh
      - ./containers/rabbitmq.conf:/etc/rabbitmq/conf.d/10-defaults.conf
    entrypoint: /usr/local/bin/cluster-entrypoint.sh
    networks:
      - network_default
    healthcheck:
      test: "rabbitmq-diagnostics -q ping > /dev/null"
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s

  rabbitmq2:
    image: rabbitmq:3.13.2-management
    container_name: rabbitmq2
    hostname: rabbitmq2
    depends_on:
      - rabbitmq1
    environment:
      - JOIN_CLUSTER_HOST=rabbitmq1
    volumes:
      - ./containers/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie
      - ./containers/cluster-entrypoint.sh:/usr/local/bin/cluster-entrypoint.sh
      - ./containers/rabbitmq.conf:/etc/rabbitmq/conf.d/10-defaults.conf
    entrypoint: /usr/local/bin/cluster-entrypoint.sh
    networks:
      - network_default
    healthcheck:
      test: "rabbitmq-diagnostics -q ping > /dev/null"
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s

  rabbitmq3:
    image: rabbitmq:3.13.2-management
    container_name: rabbitmq3
    hostname: rabbitmq3
    depends_on:
      - rabbitmq1
    environment:
      - JOIN_CLUSTER_HOST=rabbitmq1
    volumes:
      - ./containers/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie
      - ./containers/cluster-entrypoint.sh:/usr/local/bin/cluster-entrypoint.sh
      - ./containers/rabbitmq.conf:/etc/rabbitmq/conf.d/10-defaults.conf
    entrypoint: /usr/local/bin/cluster-entrypoint.sh
    networks:
      - network_default
    healthcheck:
      test: "rabbitmq-diagnostics -q ping > /dev/null"
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s

  haproxy:
    image: haproxy:2.9.7
    container_name: haproxy
    volumes:
      - ./containers/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      rabbitmq1:
        condition: service_healthy
      rabbitmq2:
        condition: service_healthy
      rabbitmq3:
        condition: service_healthy
    ports:
      - 15692:15692
      - 15672:15672
      - 5672:5672
      - 1936:1936
    networks:
      - network_default

  mongodb:
    container_name: mongodb
    image: mongo
    ports:
      - "27017:27017"
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - network_default
    healthcheck:
      test: "mongosh --eval 'print(\"waited for connection\")'"
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: guest
      ME_CONFIG_BASICAUTH_PASSWORD: guest
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongodb:27017/
    links:
      - mongodb
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - network_default

  consumer-users:
    container_name: consumer-users
    build:
      context: .
      dockerfile: consumer-amqp.Dockerfile
    image: consumer-rabbitmq:v1
    restart: on-failure
    environment:
      RESOURCE_TYPE: users
    env_file:
      - containers/.environment
    depends_on:
      - haproxy
    networks:
      - network_default

  consumer-albums: &consumer
    container_name: consumer-albums
    image: consumer-rabbitmq:v1
    restart: on-failure
    environment:
      RESOURCE_TYPE: albums
    env_file:
      - containers/.environment
    depends_on:
      - consumer-users
    networks:
      - network_default

  consumer-posts:
    <<: *consumer
    container_name: consumer-posts
    environment:
      RESOURCE_TYPE: posts
    depends_on:
      - consumer-albums

  consumer-photos:
    <<: *consumer
    container_name: consumer-photos
    environment:
      RESOURCE_TYPE: photos
    depends_on:
      - consumer-posts

  consumer-comments:
    <<: *consumer
    container_name: consumer-comments
    environment:
      RESOURCE_TYPE: comments
    depends_on:
      - consumer-photos

  consumer-todos:
    <<: *consumer
    container_name: consumer-todos
    environment:
      RESOURCE_TYPE: todos
    depends_on:
      - consumer-comments

  crud-http:
    container_name: crud-http
    build:
      context: .
      dockerfile: crud-http.Dockerfile
    image: crud-http:v1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.resources.rule=PathPrefix(`/api/v1/`)"
      - "traefik.http.routers.swagger.rule=PathPrefix(`/swagger`)"
      - "traefik.http.services.app.loadbalancer.server.port=5000"
    # ports:
    #   - "5000:5000"
    env_file:
      - containers/.environment
    networks:
      - network_default

  redis:
    container_name: redis
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
      - "8001:8001"
    restart: always
    networks:
      - network_default

networks:
  network_default:
    name: network_default
    driver: bridge
